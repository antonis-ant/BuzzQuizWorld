/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BuzzProject.GUI1;

import BuzzProject.Game;
import BuzzProject.Player;
import BuzzProject.Questions.PicQuestion;
import BuzzProject.Questions.Question;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 * A class that implements the main graphical user interface with the user and 
 * drives the game flow
 * 
 * @author Αντωνιάδης Αντώνης 2718
 * @author Ανδρεάδης Ανδρέας 2729
 * @version 2.0
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private static final int ROUNDS_PER_GAME = 5;
    private int roundCount;
    private ArrayList<Question> roundQuests;
    private int questionIndex; // an index for array of questions;

    private int playerSum;
    private int roundType; // an integer re[resenting the round type
    private Game g;
    private Player[] players;
    private StatsFrame statsFrame;
    
    private boolean p1Done;
    private boolean p2Done;
    
    private boolean p1BetDone;
    private boolean p2BetDone;
    
    private int time;
    private Thread timer;
    
    private ResourceBundle messages;
    private Locale currentLocale;
    private String language;
    private String country;

    public GUI() {
        initComponents();
        nextQuestionButton.setEnabled(false);
        player1Panel.setVisible(false);
        player2Panel.setVisible(false);
        //setFocusable(true);
        roundQuests = new ArrayList<>();
        questionIndex = -1;
        roundCount = -1;
        p1Done = false;
        p2Done = false;
        time = 5;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        P1BetButtonGroup = new javax.swing.ButtonGroup();
        P2BetButtonGroup = new javax.swing.ButtonGroup();
        roundInterractionPanel = new javax.swing.JPanel();
        fasetAnsPanel = new javax.swing.JPanel();
        beFast1 = new javax.swing.JLabel();
        stopWatchPanel = new javax.swing.JPanel();
        timerLabel = new javax.swing.JLabel();
        beFast = new javax.swing.JLabel();
        startTimerButton = new javax.swing.JButton();
        betRoundPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        P1bet250rb = new javax.swing.JRadioButton();
        P1bet750rb = new javax.swing.JRadioButton();
        P1bet500rb = new javax.swing.JRadioButton();
        P1bet1000rb = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        P2bet250rb = new javax.swing.JRadioButton();
        P2bet500rb = new javax.swing.JRadioButton();
        P2bet750rb = new javax.swing.JRadioButton();
        P2bet1000rb = new javax.swing.JRadioButton();
        placeYourBets = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        ThermometerPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        blankPanel = new javax.swing.JPanel();
        questionPanel = new javax.swing.JPanel();
        questionLabel = new javax.swing.JLabel("");
        roundTypeLabel = new javax.swing.JLabel();
        questionCategoryLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        questImgLabel = new javax.swing.JLabel();
        interfacePanel = new javax.swing.JPanel();
        nextRoundButton = new javax.swing.JButton();
        nextQuestionButton = new javax.swing.JButton();
        player1Panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        p1nameLabel = new javax.swing.JLabel();
        jLabel2a = new javax.swing.JLabel();
        p1ScoreLabel = new javax.swing.JLabel();
        p1ControlsLabel = new javax.swing.JLabel();
        p1AnsLabel = new javax.swing.JLabel();
        p1status = new javax.swing.JLabel();
        p1StatusLabel = new javax.swing.JLabel();
        player2Panel = new javax.swing.JPanel();
        jLabel1a_2 = new javax.swing.JLabel();
        p2nameLabel = new javax.swing.JLabel();
        jLabel2a_2 = new javax.swing.JLabel();
        p2ScoreLabel = new javax.swing.JLabel();
        p2ControlsLabel = new javax.swing.JLabel();
        p2AnsLabel = new javax.swing.JLabel();
        p2Status = new javax.swing.JLabel();
        p2StatusLabel = new javax.swing.JLabel();
        englishButton = new javax.swing.JButton();
        greekButton = new javax.swing.JButton();
        langLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newSinglePlayerGameMenuItem = new javax.swing.JMenuItem();
        newMultiplayerPlayerGameMenuItem = new javax.swing.JMenuItem();
        historyMenu = new javax.swing.JMenu();
        showStats = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buzz! Quiz World!");
        setMinimumSize(new java.awt.Dimension(900, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 600));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roundInterractionPanel.setLayout(new java.awt.CardLayout());

        beFast1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        beFast1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        beFast1.setText("BE FAST!");

        javax.swing.GroupLayout fasetAnsPanelLayout = new javax.swing.GroupLayout(fasetAnsPanel);
        fasetAnsPanel.setLayout(fasetAnsPanelLayout);
        fasetAnsPanelLayout.setHorizontalGroup(
            fasetAnsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fasetAnsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(beFast1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        fasetAnsPanelLayout.setVerticalGroup(
            fasetAnsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fasetAnsPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(beFast1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        roundInterractionPanel.add(fasetAnsPanel, "fasterAns");

        timerLabel.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        beFast.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        beFast.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        beFast.setText("Be Fast!");

        startTimerButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        startTimerButton.setText("GO!");
        startTimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stopWatchPanelLayout = new javax.swing.GroupLayout(stopWatchPanel);
        stopWatchPanel.setLayout(stopWatchPanelLayout);
        stopWatchPanelLayout.setHorizontalGroup(
            stopWatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stopWatchPanelLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(startTimerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
            .addGroup(stopWatchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(beFast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        stopWatchPanelLayout.setVerticalGroup(
            stopWatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stopWatchPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(beFast)
                .addGap(30, 30, 30)
                .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(startTimerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        roundInterractionPanel.add(stopWatchPanel, "stopWatch");

        jLabel2.setText("Player 1 Bet");

        P1BetButtonGroup.add(P1bet250rb);
        P1bet250rb.setText("250");
        P1bet250rb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                P1bet250rbStateChanged(evt);
            }
        });
        P1bet250rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1bet250rbActionPerformed(evt);
            }
        });

        P1BetButtonGroup.add(P1bet750rb);
        P1bet750rb.setText("750");
        P1bet750rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1bet750rbActionPerformed(evt);
            }
        });

        P1BetButtonGroup.add(P1bet500rb);
        P1bet500rb.setText("500");
        P1bet500rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1bet500rbActionPerformed(evt);
            }
        });

        P1BetButtonGroup.add(P1bet1000rb);
        P1bet1000rb.setText("1000");
        P1bet1000rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1bet1000rbActionPerformed(evt);
            }
        });

        jLabel3.setText("Player 2 Bet");

        P2BetButtonGroup.add(P2bet250rb);
        P2bet250rb.setText("250");
        P2bet250rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2bet250rbActionPerformed(evt);
            }
        });

        P2BetButtonGroup.add(P2bet500rb);
        P2bet500rb.setText("500");
        P2bet500rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2bet500rbActionPerformed(evt);
            }
        });

        P2BetButtonGroup.add(P2bet750rb);
        P2bet750rb.setText("750");
        P2bet750rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2bet750rbActionPerformed(evt);
            }
        });

        P2BetButtonGroup.add(P2bet1000rb);
        P2bet1000rb.setText("1000");
        P2bet1000rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2bet1000rbActionPerformed(evt);
            }
        });

        placeYourBets.setText("Place Your Bets");

        goButton.setText("Go!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout betRoundPanelLayout = new javax.swing.GroupLayout(betRoundPanel);
        betRoundPanel.setLayout(betRoundPanelLayout);
        betRoundPanelLayout.setHorizontalGroup(
            betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betRoundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(P1bet250rb, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(P1bet500rb)
                    .addComponent(P1bet750rb)
                    .addComponent(P1bet1000rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(P2bet250rb)
                        .addComponent(P2bet500rb)
                        .addComponent(P2bet750rb)
                        .addComponent(P2bet1000rb))
                    .addGroup(betRoundPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)))
                .addGap(20, 20, 20))
            .addGroup(betRoundPanelLayout.createSequentialGroup()
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betRoundPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(betRoundPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(placeYourBets)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        betRoundPanelLayout.setVerticalGroup(
            betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betRoundPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(placeYourBets)
                .addGap(18, 18, 18)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(P1bet250rb)
                    .addComponent(P2bet250rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(P1bet500rb)
                    .addComponent(P2bet500rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(P1bet750rb)
                    .addComponent(P2bet750rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(betRoundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(P1bet1000rb)
                    .addComponent(P2bet1000rb))
                .addGap(18, 18, 18)
                .addComponent(goButton)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        roundInterractionPanel.add(betRoundPanel, "bet");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("PERFECT ROUND");

        javax.swing.GroupLayout ThermometerPanelLayout = new javax.swing.GroupLayout(ThermometerPanel);
        ThermometerPanel.setLayout(ThermometerPanelLayout);
        ThermometerPanelLayout.setHorizontalGroup(
            ThermometerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThermometerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        ThermometerPanelLayout.setVerticalGroup(
            ThermometerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThermometerPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(238, Short.MAX_VALUE))
        );

        roundInterractionPanel.add(ThermometerPanel, "thermometer");

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        roundInterractionPanel.add(blankPanel, "blank");

        getContentPane().add(roundInterractionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(705, 0, 180, 300));
        roundInterractionPanel.setVisible(false);

        questionLabel.setToolTipText("");
        questionLabel.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                questionLabelInputMethodTextChanged(evt);
            }
        });

        questionCategoryLabel.setText("");

        jLabel4.setText(" Category:");

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addComponent(questImgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addComponent(roundTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(questionCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))))
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(roundTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(questionCategoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(questionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addComponent(questImgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(424, 424, 424))
        );

        questionCategoryLabel.setVisible(false);
        jLabel4.setVisible(false);

        getContentPane().add(questionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, -1, 291));

        nextRoundButton.setText("Next Round");
        nextRoundButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextRoundButtonMouseClicked(evt);
            }
        });
        nextRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextRoundButtonActionPerformed(evt);
            }
        });
        nextRoundButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nextRoundButtonKeyReleased(evt);
            }
        });

        nextQuestionButton.setText("Next Question");
        nextQuestionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextQuestionButtonMouseClicked(evt);
            }
        });
        nextQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQuestionButtonActionPerformed(evt);
            }
        });
        nextQuestionButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nextQuestionButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nextQuestionButtonKeyReleased(evt);
            }
        });

        player1Panel.setEnabled(false);

        jLabel1.setText("Player 1:");

        jLabel2a.setText("Score:");

        p1ControlsLabel.setText("Controls: Q,W,E,R");

        p1status.setText("Status:");

        javax.swing.GroupLayout player1PanelLayout = new javax.swing.GroupLayout(player1Panel);
        player1Panel.setLayout(player1PanelLayout);
        player1PanelLayout.setHorizontalGroup(
            player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(player1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p1ControlsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addGroup(player1PanelLayout.createSequentialGroup()
                        .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(player1PanelLayout.createSequentialGroup()
                                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2a, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(p1nameLabel)
                                    .addComponent(p1ScoreLabel)))
                            .addGroup(player1PanelLayout.createSequentialGroup()
                                .addComponent(p1status)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(p1StatusLabel)
                                    .addGroup(player1PanelLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(p1AnsLabel)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        player1PanelLayout.setVerticalGroup(
            player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(player1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(p1nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2a)
                    .addComponent(p1ScoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p1ControlsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p1AnsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(player1PanelLayout.createSequentialGroup()
                        .addComponent(p1StatusLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(player1PanelLayout.createSequentialGroup()
                        .addComponent(p1status)
                        .addGap(0, 9, Short.MAX_VALUE))))
        );

        jLabel1a_2.setText("Player 2:");

        jLabel2a_2.setText("Score:");

        p2ControlsLabel.setText("Controls: U,I,O,P");

        p2Status.setText("Status:");

        javax.swing.GroupLayout player2PanelLayout = new javax.swing.GroupLayout(player2Panel);
        player2Panel.setLayout(player2PanelLayout);
        player2PanelLayout.setHorizontalGroup(
            player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(player2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p2ControlsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addGroup(player2PanelLayout.createSequentialGroup()
                        .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(player2PanelLayout.createSequentialGroup()
                                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2a_2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1a_2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(p2nameLabel)
                                    .addComponent(p2ScoreLabel)))
                            .addGroup(player2PanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(p2AnsLabel))
                            .addGroup(player2PanelLayout.createSequentialGroup()
                                .addComponent(p2Status)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(p2StatusLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        player2PanelLayout.setVerticalGroup(
            player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(player2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1a_2)
                    .addComponent(p2nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2a_2)
                    .addComponent(p2ScoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p2ControlsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p2AnsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p2Status)
                    .addComponent(p2StatusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout interfacePanelLayout = new javax.swing.GroupLayout(interfacePanel);
        interfacePanel.setLayout(interfacePanelLayout);
        interfacePanelLayout.setHorizontalGroup(
            interfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interfacePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(interfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nextRoundButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextQuestionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                .addGap(108, 108, 108)
                .addComponent(player1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(player2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        interfacePanelLayout.setVerticalGroup(
            interfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interfacePanelLayout.createSequentialGroup()
                .addGroup(interfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(interfacePanelLayout.createSequentialGroup()
                        .addComponent(nextRoundButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(player1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(player2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        nextRoundButton.setVisible(false);
        nextRoundButton.setVisible(false);

        getContentPane().add(interfacePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 349, 732, 130));

        englishButton.setText("English");
        englishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishButtonActionPerformed(evt);
            }
        });
        getContentPane().add(englishButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 380, 90, 40));

        greekButton.setText("Greek");
        greekButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greekButtonActionPerformed(evt);
            }
        });
        getContentPane().add(greekButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 430, 90, 40));

        langLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        langLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        langLabel.setText("Choose a Language");
        getContentPane().add(langLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 300, 170, 40));

        gameMenu.setText("Game");
        gameMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameMenuActionPerformed(evt);
            }
        });

        newSinglePlayerGameMenuItem.setText("New Single Game");
        newSinglePlayerGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSinglePlayerGameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newSinglePlayerGameMenuItem);

        newMultiplayerPlayerGameMenuItem.setText("New 2 Players Game");
        newMultiplayerPlayerGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMultiplayerPlayerGameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newMultiplayerPlayerGameMenuItem);

        jMenuBar1.add(gameMenu);
        gameMenu.setEnabled(false);

        historyMenu.setText("History");

        showStats.setText("Show Statistics");
        showStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showStatsActionPerformed(evt);
            }
        });
        historyMenu.add(showStats);

        jMenuBar1.add(historyMenu);
        historyMenu.setEnabled(false);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method performs the actions for the start multi-player game menu
     * option.
     *
     * @param evt
     */
    private void newMultiplayerPlayerGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMultiplayerPlayerGameMenuItemActionPerformed
        playerSum = 2;
        try {
            initializeGame();
        } catch (IOException ex) {
            System.out.println("Could not load stats file.");
        }

        setNewGameScreen();

    }//GEN-LAST:event_newMultiplayerPlayerGameMenuItemActionPerformed


    private void gameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameMenuActionPerformed


    }//GEN-LAST:event_gameMenuActionPerformed

    private void questionLabelInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_questionLabelInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_questionLabelInputMethodTextChanged

    // lets start from here
    private void nextRoundButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextRoundButtonMouseClicked
        
        setNewGameScreen();
        roundCount++; // increment the round count
        questionLabel.setVisible(false);
        questionCategoryLabel.setVisible(false);
        jLabel4.setVisible(false);
        

        // change next round button text and disable it
        nextRoundButton.setText(messages.getString("nextRound"));
        nextRoundButton.setEnabled(false);

        // initialize a round and its round type
        roundQuests.clear();// clear previous round questions
        questionIndex = -1;
        roundQuests = g.initializeRound();
        roundType = g.getRoundType();

        // 1.set round type label text
        setRoundScreen();
        nextQuestionButton.setEnabled(true);

        if (roundCount == ROUNDS_PER_GAME) {
            updateStats();
            System.exit(0);
        }


    }//GEN-LAST:event_nextRoundButtonMouseClicked

    /**
     * This method saves the player's stats to a file.
     */
    private void updateStats() {
        if (playerSum == 2) {
            // 1. get the winner in multi-player game
            Player winner = g.getWinner();
            // 2. show a message box static which player won the game
            JOptionPane.showMessageDialog(null, "Player " + winner.getName() + " won this game!", "Winner", JOptionPane.INFORMATION_MESSAGE);
            // 3. update player wins
            try {
                g.updateStats_mP(winner);
            } catch (IOException ex) {
                System.out.println("Could not open stats file!");
            }
        } else if (playerSum == 1) {
            // update player's score
            try {
                g.updateStats_sP(players[0]);
            } catch (IOException ex) {
                System.out.println("Could not open stats file!");
            }
        }
    }

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_formKeyReleased


    private void nextRoundButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextRoundButtonKeyReleased

    }//GEN-LAST:event_nextRoundButtonKeyReleased

    /**
     * Action listener for single player game.
     *
     * @param evt
     */
    private void newSinglePlayerGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSinglePlayerGameMenuItemActionPerformed
        // TODO add your handling code here:
        playerSum = 1;
        // handle exception from file load
        try {
            initializeGame();
        } catch (IOException ex) {
            System.out.println("Could not open stats file.");
        }
        setNewGameScreen();
    }//GEN-LAST:event_newSinglePlayerGameMenuItemActionPerformed

    private void nextQuestionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextQuestionButtonMouseClicked

    }//GEN-LAST:event_nextQuestionButtonMouseClicked

    private void nextQuestionButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextQuestionButtonKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_nextQuestionButtonKeyReleased

    private void nextRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextRoundButtonActionPerformed

    }//GEN-LAST:event_nextRoundButtonActionPerformed

    /**
     * This key listener handles all player input to the form
     *
     * @param evt key pressed
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        handleInput(evt.getKeyCode());
        // if there is one player and he has given a valid answer,
        if (p1Done && playerSum == 1) {
            p2Done = true; // set second players done-flag to bypass the next if statement
        }
        if (p1Done && p2Done) {
            setFocusable(false);
            playRound();
            if(questionIndex<4){
                nextQuestionButton.setEnabled(true);
            }
            if(questionIndex == 4){
               nextRoundButton.setEnabled(true);
            }
            // reset done flags
            p1Done = false;
            p2Done = false;
        }

    }//GEN-LAST:event_formKeyPressed

    /**
     * This method handles user's keyboard input and determines which player
     * gave a valid answer. It also saves the answer.
     *
     * @param keyCode the key that was pressed
     * @param pIndex
     */
    private void handleInput(int keyCode) {
        switch (keyCode) {
            case KeyEvent.VK_Q:
                if (!p1Done) {
                    p1Done = true; // flag that a valid answer has been registered
                    getInputData(players[0], '1');
                }
                break;
            case KeyEvent.VK_W:
                if (!p1Done) {
                    p1Done = true; // flag that a valid answer has been registered
                    getInputData(players[0], '2');
                }
                break;
            case KeyEvent.VK_E:
                if (!p1Done) {
                    p1Done = true; // flag that a valid answer has been registered
                    getInputData(players[0], '3');
                }
                break;
            case KeyEvent.VK_R:
                if (!p1Done) {
                    p1Done = true; // flag that a valid answer has been registered
                    getInputData(players[0], '4');
                }
                break;
            // player 2 input check starts here:
            case KeyEvent.VK_U:
                if (playerSum == 2 && !p2Done) {
                    p2Done = true;
                    getInputData(players[1], '1');
                } else {
                    p1StatusLabel.setText(messages.getString("inv"));
                }
                break;
            case KeyEvent.VK_I:
                if (playerSum == 2 && !p2Done) {
                    p2Done = true;
                    getInputData(players[1], '2');
                } else {
                    p1StatusLabel.setText(messages.getString("inv"));
                }
                break;
            case KeyEvent.VK_O:
                if (playerSum == 2 && !p2Done) {
                    p2Done = true;
                    getInputData(players[1], '3');
                } else {
                    p1StatusLabel.setText(messages.getString("inv"));
                }
                break;
            case KeyEvent.VK_P:
                if (playerSum == 2 && !p2Done) {
                    p2Done = true;
                    getInputData(players[1], '4');
                } else {
                    p1StatusLabel.setText(messages.getString("inv"));
                }
                break;
            default:
                p1StatusLabel.setText(messages.getString("inv"));
                if (playerSum == 2) {
                    p2StatusLabel.setText(messages.getString("inv"));
                }
                break;
        }
    }

    /**
     * A method used to set a player's given answer and other data depending on
     * round type
     *
     * @param p the player
     */
    private void getInputData(Player p, char ans) {
        switch (roundType) {
            // right answer round case
            case 0:
                p.setPlayerFactor(1000);
                p.setAnswer(ans);
                break;
            // bet roound case
            case 1:
                p.setAnswer(ans);
                break;
            // stop watch round case
            case 2:
                p.setPlayerFactor(time);
                p.setAnswer(ans);
                // if all players answered stop the timer thread
                if (playerSum == 1) {
                    if (p1Done) {
                        timer.interrupt();
                    }
                } else if (playerSum == 2) {
                    if (p1Done && p2Done) {
                        timer.interrupt();
                    }
                }
                break;
            // faster answer round case
            case 3:
                p.setPlayerFactor(System.currentTimeMillis());
                p.setAnswer(ans);
                break;
            // thermometer round case
            case 4:
                p.setAnswer(ans);
                break;
            default:
                break;
        }
    }
    
    private void showQuestion() {
        Object q = roundQuests.get(questionIndex);
        if(q instanceof PicQuestion) {
            // get the question's image
            PicQuestion picQ = (PicQuestion) q;
            //get the question
            questionLabel.setText("<html>".concat(q.toString()).concat("</html>"));
            questImgLabel.setIcon(picQ.getImage());
            questImgLabel.setVisible(true);
        } else {
            Question pic = (Question)q;
            questionLabel.setText("<html>".concat(q.toString()).concat("</html>"));
            questImgLabel.setVisible(false);
        }
        questionLabel.setVisible(true);
    }

    /**
     * This method sets the right answer round screen and settings.
     */
    private void rightAnsSetup() {
        // present the question category and question labels
        questionLabel.setVisible(true);
        questionCategoryLabel.setText(roundQuests.get(questionIndex).getCategory());
        showQuestion();
//questionLabel.setText("<html>".concat(roundQuests.get(questionIndex).toString()).concat("</html>"));
        roundIntSetup("blank");
        // set focus to window to activate key-listener
        setFocusable(true);
        requestFocus();
    }

    /**
     * This method sets the screen and data for the bet round type
     */
    private void betSetup() {
        // set the category label and show category
        jLabel4.setVisible(true);
        questionCategoryLabel.setVisible(true);
        questionLabel.setVisible(false);
        questionCategoryLabel.setText(roundQuests.get(questionIndex).getCategory());
        questionCategoryLabel.setVisible(true);
        P1BetButtonGroup.clearSelection();
        P2BetButtonGroup.clearSelection();
        p1RadioButtonsOn(false);
        p2RadioButtonsOn(false);
        p1BetDone = false;
        p2BetDone = false;
        goButton.setEnabled(false);
        // show bet card interface
        roundIntSetup("bet");
        // enable radio button groups for the player(s)
        p1RadioButtonsOn(true);
        p2BetDone = true;
        if (playerSum == 2) {
            p2RadioButtonsOn(true);
            p2BetDone = false;
        }
        betRoundPanel.setVisible(true);

    }

    /**
     * This method sets the screen and data to the stop watch round
     */
    private void stopWatchSetup() {
        // show the stop watch round card
        roundIntSetup("stopWatch");
        time = 5; // initalize the time
        timerLabel.setText(Integer.toString(time));
        startTimerButton.setEnabled(true);

    }

    /**
     * This method sets the screen and data to the faster answer round
     */
    private void fasterAnsSetup() {
        roundIntSetup("blank");
        questionCategoryLabel.setText(roundQuests.get(questionIndex).getCategory());
        showQuestion();

        // set focus to window to activate key-listener
        setFocusable(true);
        requestFocus();
    }

    /**
     * This method sets the screen and data to the thermometer round
     */
    private void thermometerSetup() {
        roundIntSetup("thermometer");
        questionCategoryLabel.setText(roundQuests.get(questionIndex).getCategory());
        showQuestion();

        // set focus to window to activate key-listener
        setFocusable(true);
        requestFocus();
    }

    /**
     * This method enables the round card with the given name
     *
     * @param card a string. The name of the card to enable
     */
    private void roundIntSetup(String card) {
        CardLayout cl = (CardLayout) roundInterractionPanel.getLayout();
        cl.show(roundInterractionPanel, card);
        roundInterractionPanel.setVisible(true);
    }

    /**
     * This method enables/disables the radio buttons for player 1.
     *
     * @param on a boolean: true to enable buttons false to disable buttons
     */
    private void p1RadioButtonsOn(boolean on) {
        if (on) {
            P1bet250rb.setEnabled(true);
            P1bet500rb.setEnabled(true);
            P1bet750rb.setEnabled(true);
            P1bet1000rb.setEnabled(true);
        } else {
            P1bet250rb.setEnabled(false);
            P1bet500rb.setEnabled(false);
            P1bet750rb.setEnabled(false);
            P1bet1000rb.setEnabled(false);
        }
    }

    /**
     * This method enables/disables the radio buttons for player 2.
     *
     * @param on a boolean: true to enable buttons false to disable buttons
     */
    private void p2RadioButtonsOn(boolean on) {
        if (on) {
            P2bet250rb.setEnabled(true);
            P2bet500rb.setEnabled(true);
            P2bet750rb.setEnabled(true);
            P2bet1000rb.setEnabled(true);
        } else {
            P2bet250rb.setEnabled(false);
            P2bet500rb.setEnabled(false);
            P2bet750rb.setEnabled(false);
            P2bet1000rb.setEnabled(false);
        }
    }

    private void nextQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQuestionButtonActionPerformed

        // disable next question button until question was answered by all players
        questImgLabel.setVisible(false);
        
        nextQuestionButton.setEnabled(false);
        questionLabel.setVisible(false);

        // reset player(s)' answers
        for (int i = 0; i < playerSum; i++) {
            players[i].setAnswer(' ');
        }
        // update player info
        updatePlayerInfo();

        // increment question counter
        questionIndex++;
        // set the screen for the question and present question
        switch (roundType) {
            case 0:
                rightAnsSetup();
                break;
            case 1:
                betSetup();
                break;
            case 2:
                stopWatchSetup();
                break;
            case 3:
                fasterAnsSetup();
                break;
            case 4:
                thermometerSetup();
                break;
            default:
                break;

        }
        // check if end of round was reached
        if (questionIndex == 4) {
            nextQuestionButton.setEnabled(false);
          //  nextRoundButton.setEnabled(true);
        }
         if(questionIndex == 5) {  
          roundIntSetup("blank");

        }

    }//GEN-LAST:event_nextQuestionButtonActionPerformed


    private void nextQuestionButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextQuestionButtonKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_nextQuestionButtonKeyPressed

    // ---- BET RADIO BUTTONS ACTION LISTENERS - START
    private void P1bet250rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1bet250rbActionPerformed
        betAction(0, 250);
    }//GEN-LAST:event_P1bet250rbActionPerformed

    // empty
    private void P1bet250rbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_P1bet250rbStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_P1bet250rbStateChanged

    private void P1bet750rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1bet750rbActionPerformed
        betAction(0, 750);
    }//GEN-LAST:event_P1bet750rbActionPerformed

    private void P1bet500rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1bet500rbActionPerformed
        betAction(0, 500);
    }//GEN-LAST:event_P1bet500rbActionPerformed

    private void P1bet1000rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1bet1000rbActionPerformed
        betAction(0, 1000);
    }//GEN-LAST:event_P1bet1000rbActionPerformed

    private void P2bet250rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2bet250rbActionPerformed
        betAction(1, 250);
    }//GEN-LAST:event_P2bet250rbActionPerformed

    private void P2bet500rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2bet500rbActionPerformed
        betAction(1, 500);
    }//GEN-LAST:event_P2bet500rbActionPerformed

    private void P2bet750rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2bet750rbActionPerformed
        betAction(1, 750);
    }//GEN-LAST:event_P2bet750rbActionPerformed

    private void P2bet1000rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2bet1000rbActionPerformed
        betAction(1, 1000);
    }//GEN-LAST:event_P2bet1000rbActionPerformed
    // ---- BET RADIO BUTTONS ACTION LISTENERS - END

    /**
     * This method gets the action event of the go button from bet round
     *
     * @param evt
     */
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // present the question
        showQuestion();
        // set focus to main frame to activate the key-listener
        setFocusable(true);
        requestFocus();
        goButton.setEnabled(false);
    }//GEN-LAST:event_goButtonActionPerformed

    private void startTimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimerButtonActionPerformed
        // set question category and question labels
        questionCategoryLabel.setText(roundQuests.get(questionIndex).getCategory());
        showQuestion();
        questionLabel.setVisible(true);
        startTimerButton.setEnabled(false);

        // build a new thread that starts the countdown
        timer = new Thread() {
            @Override
            public void run() {
                for (int t = 5000; t > -1; t--) {
                    try {
                        time = t;
                        if(t % 1000 == 0) {
                           timerLabel.setText(Integer.toString(time/1000));
                        }
                        Thread.sleep(1);

                    } catch (InterruptedException ex) {
                        return;
                    }
                }
            }
        };
        timer.start();
        // set focus to main frame to activate the key-listener
        setFocusable(true);
        requestFocus();

    }//GEN-LAST:event_startTimerButtonActionPerformed

    private void showStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showStatsActionPerformed
        // TODO add your handling code here:
        statsFrame = new StatsFrame(g.getStats());
    }//GEN-LAST:event_showStatsActionPerformed

    private void englishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishButtonActionPerformed
        // TODO add your handling code here:
        
        language = new String("en");
        country = new String("US");
       
        currentLocale = new Locale(language, country);
        messages = ResourceBundle.getBundle("MessagesBundle",currentLocale);
        
        setLanguage();
      
    }//GEN-LAST:event_englishButtonActionPerformed

    private void greekButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greekButtonActionPerformed
        // TODO add your handling code here:
        
        language = new String("el");
        country = new String("GR");
         
        currentLocale = new Locale(language, country);
        messages = ResourceBundle.getBundle("MessagesBundle",currentLocale);
        setLanguage();
       
    }//GEN-LAST:event_greekButtonActionPerformed
    private void setLanguage(){
       langLabel.setVisible(false);
        gameMenu.setEnabled(true);
        gameMenu.setVisible(true);
        gameMenu.setText(messages.getString("gameMenu1"));
        historyMenu.setText(messages.getString("history"));
        timerLabel.setText(messages.getString("timerButton"));
        beFast.setText(messages.getString("beFast"));
        jLabel4.setText(messages.getString("cat"));
        newSinglePlayerGameMenuItem.setText(messages.getString("newFor1"));
        newMultiplayerPlayerGameMenuItem.setText(messages.getString("newFor2"));
        nextRoundButton.setText(messages.getString("nextRound"));
        nextQuestionButton.setText(messages.getString("nextQuestion"));
        beFast1.setText(messages.getString("beFast"));
        jLabel1.setText(messages.getString("p1"));
        jLabel2a.setText(messages.getString("p1Score"));
        p1ControlsLabel.setText(messages.getString("p1Controls"));
        p1status.setText(messages.getString("p1Status"));
        jLabel2.setText(messages.getString("p1Bet"));
        jLabel3.setText(messages.getString("p2Bet"));
        placeYourBets.setText(messages.getString("chooseBet")); 
        greekButton.setVisible(false);
        englishButton.setVisible(false);
        jLabel1a_2.setText(messages.getString("p2"));
        jLabel2a_2.setText(messages.getString("p2Score"));
        p2ControlsLabel.setText(messages.getString("p2Controls"));
        p2Status.setText(messages.getString("p2Status"));
        goButton.setText(messages.getString("goBet"));

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
    }

    /**
     * This method performs the standard action when a radio box is selected.
     *
     * @param index an integer:
     * @param bet an integer: specifies the amount of the bet
     */
    private void betAction(int index, int bet) {
        players[index].setPlayerFactor(bet);
        if (index == 0) {
            p1RadioButtonsOn(false);
            p1BetDone = true;
        } else if (index == 1) {
            p2RadioButtonsOn(false);
            p2BetDone = true;
        }
        // if player(s) gave a bet enable the button to continue
        if (p1BetDone && p2BetDone) {
            goButton.setEnabled(true);
        }

    }

    // **** Game Logic Methods ****
    /**
     * This method starts a new game, asks for user name and initializes the
     * player(s)
     */
    private void initializeGame() throws IOException {
        g = new Game(playerSum, currentLocale); //start a new game with 2 players 
        players = new Player[playerSum]; // initialize player array
        String name;
        // get player names form users and initialize players
        for (int i = 0; i < playerSum; i++) {
            name = JOptionPane.showInputDialog(messages.getString("input"));
            players[i] = g.initializePlayer(name);

        }
    }

    /**
     * This method sets the starting screen after starting a new Game.
     */
    private void setNewGameScreen() {
        historyMenu.setEnabled(true);

        questImgLabel.setVisible(false);
        
        nextQuestionButton.setEnabled(false);
        nextRoundButton.setText(messages.getString("start"));
        nextRoundButton.setVisible(true);
        nextRoundButton.setEnabled(true);
        player1Panel.setVisible(false);
        player2Panel.setVisible(false);
        questionLabel.setVisible(false);
        roundIntSetup("blank");
        updatePlayerInfo();
    }

    /**
     * Sets the screen for specific round type
     */
    private void setRoundScreen() {
        switch (roundType) {
            case 0:
                roundTypeLabel.setText(messages.getString("Round1"));
                break;
            case 1:
                roundTypeLabel.setText(messages.getString("Round2"));
                break;
            case 2:
                roundTypeLabel.setText(messages.getString("Round3"));
                break;
            case 3:
                roundTypeLabel.setText(messages.getString("Round4"));
                break;
            case 4:
                roundTypeLabel.setText(messages.getString("Round5"));
                break;
        }
    }

    /**
     * This method updates the player info labels.
     */
    private void updatePlayerInfo() {
        // set stats for one player
        player1Panel.setVisible(true);
        p1nameLabel.setText(players[0].getName());
        p1ScoreLabel.setText(String.valueOf((int)players[0].getScore()));
        if (players[0].getAnswer() == ' ') {
            p1StatusLabel.setText("");
        } else {
            if (players[0].getIsRight()) {
                p1StatusLabel.setText(messages.getString("trueAns"));
            } else {
                p1StatusLabel.setText(messages.getString("falseAns"));
            }
        }

        // if its 2-player game set stats for second player too.
        if (playerSum == 2) {
            player2Panel.setVisible(true);
            p2nameLabel.setText(players[1].getName());
            p2ScoreLabel.setText(String.valueOf((int)players[1].getScore()));

            if (players[1].getAnswer() == ' ') {
                p2StatusLabel.setText("");
            } else {
                if (players[1].getIsRight()) {
                    p2StatusLabel.setText(messages.getString("trueAns"));
                } else {
                    p2StatusLabel.setText(messages.getString("falseAns"));
                }
            }

        }

    }

    /**
     * This method starts the current round type actions
     */
    private void playRound() {
        g.playRound(roundQuests.get(questionIndex));
        updatePlayerInfo();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup P1BetButtonGroup;
    private javax.swing.JRadioButton P1bet1000rb;
    private javax.swing.JRadioButton P1bet250rb;
    private javax.swing.JRadioButton P1bet500rb;
    private javax.swing.JRadioButton P1bet750rb;
    private javax.swing.ButtonGroup P2BetButtonGroup;
    private javax.swing.JRadioButton P2bet1000rb;
    private javax.swing.JRadioButton P2bet250rb;
    private javax.swing.JRadioButton P2bet500rb;
    private javax.swing.JRadioButton P2bet750rb;
    private javax.swing.JPanel ThermometerPanel;
    private javax.swing.JLabel beFast;
    private javax.swing.JLabel beFast1;
    private javax.swing.JPanel betRoundPanel;
    private javax.swing.JPanel blankPanel;
    private javax.swing.JButton englishButton;
    private javax.swing.JPanel fasetAnsPanel;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JButton goButton;
    private javax.swing.JButton greekButton;
    private javax.swing.JMenu historyMenu;
    private javax.swing.JPanel interfacePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1a_2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2a;
    private javax.swing.JLabel jLabel2a_2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel langLabel;
    private javax.swing.JMenuItem newMultiplayerPlayerGameMenuItem;
    private javax.swing.JMenuItem newSinglePlayerGameMenuItem;
    private javax.swing.JButton nextQuestionButton;
    private javax.swing.JButton nextRoundButton;
    private javax.swing.JLabel p1AnsLabel;
    private javax.swing.JLabel p1ControlsLabel;
    private javax.swing.JLabel p1ScoreLabel;
    private javax.swing.JLabel p1StatusLabel;
    private javax.swing.JLabel p1nameLabel;
    private javax.swing.JLabel p1status;
    private javax.swing.JLabel p2AnsLabel;
    private javax.swing.JLabel p2ControlsLabel;
    private javax.swing.JLabel p2ScoreLabel;
    private javax.swing.JLabel p2Status;
    private javax.swing.JLabel p2StatusLabel;
    private javax.swing.JLabel p2nameLabel;
    private javax.swing.JLabel placeYourBets;
    private javax.swing.JPanel player1Panel;
    private javax.swing.JPanel player2Panel;
    private javax.swing.JLabel questImgLabel;
    private javax.swing.JLabel questionCategoryLabel;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JPanel roundInterractionPanel;
    private javax.swing.JLabel roundTypeLabel;
    private javax.swing.JMenuItem showStats;
    private javax.swing.JButton startTimerButton;
    private javax.swing.JPanel stopWatchPanel;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
